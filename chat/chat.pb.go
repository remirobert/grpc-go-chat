// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	ChatMessage
	User
	Message
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChatMessage_RequestType int32

const (
	ChatMessage_USER_CHAT  ChatMessage_RequestType = 0
	ChatMessage_USER_JOIN  ChatMessage_RequestType = 1
	ChatMessage_USER_LEAVE ChatMessage_RequestType = 2
)

var ChatMessage_RequestType_name = map[int32]string{
	0: "USER_CHAT",
	1: "USER_JOIN",
	2: "USER_LEAVE",
}
var ChatMessage_RequestType_value = map[string]int32{
	"USER_CHAT":  0,
	"USER_JOIN":  1,
	"USER_LEAVE": 2,
}

func (x ChatMessage_RequestType) String() string {
	return proto.EnumName(ChatMessage_RequestType_name, int32(x))
}
func (ChatMessage_RequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type ChatMessage struct {
	Type    ChatMessage_RequestType `protobuf:"varint,1,opt,name=type,enum=chat.ChatMessage_RequestType" json:"type,omitempty"`
	User    *User                   `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Message *Message                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ChatMessage) Reset()                    { *m = ChatMessage{} }
func (m *ChatMessage) String() string            { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()               {}
func (*ChatMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChatMessage) GetType() ChatMessage_RequestType {
	if m != nil {
		return m.Type
	}
	return ChatMessage_USER_CHAT
}

func (m *ChatMessage) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ChatMessage) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type User struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type Message struct {
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Message) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*ChatMessage)(nil), "chat.ChatMessage")
	proto.RegisterType((*User)(nil), "chat.User")
	proto.RegisterType((*Message)(nil), "chat.Message")
	proto.RegisterEnum("chat.ChatMessage_RequestType", ChatMessage_RequestType_name, ChatMessage_RequestType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatService service

type ChatServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (ChatService_StreamClient, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (ChatService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChatService_serviceDesc.Streams[0], c.cc, "/chat.ChatService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceStreamClient{stream}
	return x, nil
}

type ChatService_StreamClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatServiceStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceStreamClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceStreamClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ChatService service

type ChatServiceServer interface {
	Stream(ChatService_StreamServer) error
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).Stream(&chatServiceStreamServer{stream})
}

type ChatService_StreamServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type chatServiceStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceStreamServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceStreamServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _ChatService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xbb, 0x31, 0x34, 0x66, 0x42, 0x43, 0x9c, 0x53, 0x28, 0x28, 0x25, 0x1e, 0xcc, 0x29,
	0x68, 0xf4, 0xe6, 0xa9, 0x84, 0x80, 0x8a, 0x7f, 0x60, 0xd3, 0x7a, 0x95, 0x98, 0x0e, 0x36, 0x87,
	0xfc, 0x71, 0x77, 0x2b, 0xf4, 0x0b, 0xfa, 0xb9, 0x4a, 0x36, 0x4d, 0x29, 0xf4, 0xb6, 0x6f, 0xf6,
	0xf7, 0x66, 0xdf, 0x3e, 0x80, 0x62, 0x9d, 0xab, 0xa8, 0x15, 0x8d, 0x6a, 0xd0, 0xec, 0xce, 0xc1,
	0x3f, 0x03, 0x27, 0x59, 0xe7, 0xea, 0x8d, 0xa4, 0xcc, 0x7f, 0x08, 0xef, 0xc0, 0x54, 0xdb, 0x96,
	0x7c, 0x36, 0x63, 0xa1, 0x1b, 0x5f, 0x46, 0xda, 0x70, 0x04, 0x44, 0x9c, 0x7e, 0x37, 0x24, 0xd5,
	0x62, 0xdb, 0x12, 0xd7, 0x28, 0x5e, 0x81, 0xb9, 0x91, 0x24, 0x7c, 0x63, 0xc6, 0x42, 0x27, 0x86,
	0xde, 0xb2, 0x94, 0x24, 0xb8, 0x9e, 0xe3, 0x0d, 0x58, 0x55, 0x6f, 0xf6, 0xcf, 0x34, 0x32, 0xe9,
	0x91, 0xfd, 0x46, 0x3e, 0xdc, 0x06, 0x8f, 0xe0, 0x1c, 0x6d, 0xc7, 0x09, 0xd8, 0xcb, 0x2c, 0xe5,
	0x5f, 0xc9, 0xd3, 0x7c, 0xe1, 0x8d, 0x0e, 0xf2, 0xe5, 0xe3, 0xf9, 0xdd, 0x63, 0xe8, 0x02, 0x68,
	0xf9, 0x9a, 0xce, 0x3f, 0x53, 0xcf, 0x08, 0x62, 0x30, 0xbb, 0x37, 0xd1, 0x05, 0xa3, 0x5c, 0xe9,
	0xf8, 0x36, 0x37, 0xca, 0x15, 0x4e, 0xe1, 0xbc, 0x4b, 0x51, 0xe7, 0x15, 0xe9, 0x84, 0x36, 0x3f,
	0xe8, 0xe0, 0x1a, 0xac, 0xe1, 0xdf, 0x3e, 0x58, 0x45, 0x53, 0x2b, 0xaa, 0xd5, 0x9e, 0x1a, 0x64,
	0x9c, 0xf4, 0x05, 0x65, 0x24, 0xfe, 0xca, 0x82, 0xf0, 0x01, 0xc6, 0x99, 0x12, 0x94, 0x57, 0x78,
	0x71, 0x52, 0xce, 0xf4, 0x74, 0x14, 0x8c, 0x42, 0x76, 0xcb, 0xbe, 0xc7, 0xba, 0xf3, 0xfb, 0x5d,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x59, 0x3c, 0xf3, 0x81, 0x01, 0x00, 0x00,
}
